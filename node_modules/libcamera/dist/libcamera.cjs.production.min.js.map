{"version":3,"file":"libcamera.cjs.production.min.js","sources":["../src/libCamera.config.ts","../src/utils/execute.ts","../src/libCamera.ts","../src/index.ts","../src/utils/index.ts"],"sourcesContent":["import { Commands } from './types';\n\nexport const commonCommands: Commands = {\n  Flags: [\n    'help', // Print help information for the application\n    'version', // Print out a software version number\n    'list-cameras', // List the cameras available for use\n    'fullscreen', // Fullscreen preview mode\n    'qt-preview', // Use Qt-based preview window\n    'nopreview', // Do not display a preview window\n    'rawfull', // Force sensor to capture in full resolution mode\n    'hflip', // Read out with horizontal mirror\n    'vflip', // Read out with vertical flip\n    'flush', // Flush output files immediately\n  ],\n  Options: [\n    'lens-position', // Set lens position <number>\n    'camera', // Selects which camera to use <index>\n    'config', // Read options from the given file <filename>\n    'timeout', // Delay before application stops automatically <milliseconds>\n    'preview', // Preview window settings <x,y,w,h>\n    'info-text', // Set window title bar text <string>\n    'width', // Capture image width <width>\n    'height', // Capture image height <height>\n    'viewfinder-width', // Capture image width <width> (preview)\n    'viewfinder-height', // Capture image height <height> (preview)\n    'mode', // Specify sensor mode, given as <width>:<height>:<bit-depth>:<packing>\n    'viewfinder-mode', // Specify sensor mode, given as <width>:<height>:<bit-depth>:<packing>\n    'lores-width', // Low resolution image width <width>\n    'lores-height', // Low resolution image height <height>\n    'rotation', // Use hflip and vflip to create the given rotation <angle>\n    'roi', // Select a crop (region of interest) from the camera <x,y,w,h>\n    'sharpness', // Set image sharpness <number>\n    'contrast', // Set image contrast <number>\n    'brightness', // Set image brightness <number>\n    'saturation', // Set image colour saturation <number>\n    'ev', // Set EV compensation <number>\n    'shutter', // Set the exposure time in microseconds <number>\n    'gain', // Sets the combined analogue and digital gains <number>\n    'analoggain', // Synonym for --gain\n    'metering', // Set the metering mode <string>\n    'exposure', // Set the exposure profile <string>\n    'awb', // Set the AWB mode <string>\n    'awbgains', // Set fixed colour gains <number,number>\n    'denoise', // Set the denoising mode <string>\n    'tuning-file', //\tSpecify the camera tuning to use <string>\"\n    'output', // Output file name <string>\n    'wrap', // Wrap output file counter at <number>\n  ],\n};\n\nexport const jpegCommands: Commands = {\n  Flags: [...commonCommands.Flags],\n  Options: [...commonCommands.Options],\n};\n\nexport const stillCommands: Commands = {\n  Flags: [\n    ...commonCommands.Flags,\n    'datetime', // Use date format for the output file names\n    'timestamp', // Use system timestamps for the output file names\n    'keypress', // Capture image when Enter pressed\n    'signal', // Capture image when SIGUSR1 received\n    'raw', // Save raw file\n  ],\n  Options: [\n    ...commonCommands.Options,\n    'quality', // JPEG quality <number>\n    'exif', // Add extra EXIF tags <string>\n    'timelapse', // Time interval between timelapse captures <milliseconds>\n    'framestart', // The starting value for the frame counter <number>\n    'restart', // Set the JPEG restart interval <number>\n    'thumb', // Set thumbnail parameters <w:h:q> or none\n    'encoding', // Set the still image codec <string> (jpg, png, bmp, rgb, yuv420)\n    'latest', // Make symbolic link to latest file saved <string>\n  ],\n};\n\nexport const vidCommands: Commands = {\n  Flags: [\n    ...commonCommands.Flags,\n    'keypress', // Capture image when Enter pressed\n    'signal', // Capture image when SIGUSR1 received\n    'split', // Split multiple recordings into separate files\n    'inline', // Write sequence header in every I frame (H.264 only)\n    'listen', // Wait for an incoming TCP connection\n  ],\n  Options: [\n    ...commonCommands.Options,\n    'quality', // JPEG quality <number>\n    'bitrate', // H.264 bitrate <number>\n    'intra', // Intra-frame period (H.264 only) <number>\n    'profile', // H.264 profile <string>\n    'level', // H.264 level <string>\n    'codec', // Encoder to be used <string> h264 mjpeg yuv420\n    'initial', // Start the application in the recording or paused state <string>\n    'segment', // Write the video recording into multiple segments <number>\n    'circular', // Write the video recording into a circular buffer of the given <size>\n    'frames', // Record exactly this many frames <number>\n  ],\n};\n\nexport const rawCommands: Commands = {\n  Flags: [...commonCommands.Flags],\n  Options: [\n    ...commonCommands.Options,\n    'segment', // direct each to a separate file.\n  ],\n};\n","import {\n  ChildProcessWithoutNullStreams,\n  ExecException,\n  ExecOptions,\n} from 'child_process';\nimport { Execute } from './types';\n\nexport default function makeExecute({ exec }: { exec: any }): Execute {\n  return Object.freeze({\n    runCommand,\n    cmdCommand,\n  });\n\n  function runCommand({\n    cmdCommand,\n    options,\n  }: {\n    cmdCommand: string;\n    options?: ExecOptions;\n  }): Promise<ChildProcessWithoutNullStreams | string> {\n    try {\n      return new Promise((resolve, reject) => {\n        exec(\n          cmdCommand,\n          options,\n          (error: ExecException | null, stdout: string, stderr: string) => {\n            if (error) {\n              if (stderr) {\n                reject(stderr.trim());\n              }\n              reject(error);\n            }\n            if (stdout) {\n              resolve(stdout.trim());\n            }\n            if (stderr) {\n              resolve(stderr.trim());\n            }\n          }\n        );\n      });\n    } catch (err) {\n      console.log('Run command error = ', err);\n      throw new Error('Error in execute run command');\n    }\n  }\n\n  function cmdCommand({\n    base,\n    params,\n  }: {\n    base: string;\n    params: Array<string>;\n  }) {\n    if (!params && base) {\n      return base;\n    }\n\n    if (!Array.isArray(params)) {\n      throw new Error('params must be an Array');\n    }\n\n    return base + ' ' + params.join(' ');\n  }\n}\n","import { Execute } from './utils/types';\nimport { PiCameraOutput, PiCameraConfig, Commands } from './types';\n\nexport default function buildMakeLibCamera({\n  execute,\n  jpegCommands,\n  stillCommands,\n  vidCommands,\n  rawCommands,\n}: {\n  execute: Execute;\n  jpegCommands: Commands;\n  stillCommands: Commands;\n  vidCommands: Commands;\n  rawCommands: Commands;\n}) {\n  return function makeLibCamera(): PiCameraOutput {\n    return Object.freeze({\n      jpeg: ({ config }: { config: PiCameraConfig }) => {\n        config = configShouldBeAnObject({ config });\n        return makeJpeg({\n          Flags: jpegCommands.Flags,\n          Options: jpegCommands.Options,\n          execute,\n          config,\n        });\n      },\n      still: ({ config }: { config: PiCameraConfig }) => {\n        config = configShouldBeAnObject({ config });\n        return makeStill({\n          Flags: stillCommands.Flags,\n          Options: stillCommands.Options,\n          execute,\n          config,\n        });\n      },\n      vid: ({ config }: { config: PiCameraConfig }) => {\n        config = configShouldBeAnObject({ config });\n        return makeVid({\n          Flags: vidCommands.Flags,\n          Options: vidCommands.Options,\n          execute,\n          config,\n        });\n      },\n      raw: ({ config }: { config: PiCameraConfig }) => {\n        config = configShouldBeAnObject({ config });\n        return makeRaw({\n          Flags: rawCommands.Flags,\n          Options: rawCommands.Options,\n          execute,\n          config,\n        });\n      },\n    });\n  };\n}\n\nfunction runCommand({\n  execute,\n  cmdCommand,\n}: {\n  execute: Execute;\n  cmdCommand: string;\n}) {\n  try {\n    return execute.runCommand({ cmdCommand }).catch((err: unknown) => {\n      if (err instanceof Error) {\n        throw new Error(`Things exploded (${err.message})`);\n      } else if (typeof err === 'string') {\n        throw new Error(err);\n      } else {\n        throw new Error('Unknown error in run command');\n      }\n    });\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(`Things exploded (${err.message})`);\n    } else {\n      throw new Error('Unknown error');\n    }\n  }\n}\n\nfunction makeJpeg({\n  Flags,\n  Options,\n  execute,\n  config,\n}: {\n  Flags: Commands['Flags'];\n  Options: Commands['Options'];\n  execute: Execute;\n  config: PiCameraConfig;\n}) {\n  const cmdCommand = createTakePictureCommand({\n    baseType: 'libcamera-jpeg',\n    Flags,\n    Options,\n    execute,\n    config,\n  });\n\n  if (process.env.NODE_ENV === 'test') {\n    console.log('cmdCommand = ', cmdCommand);\n    return cmdCommand;\n  }\n  return runCommand({ execute, cmdCommand });\n}\n\nfunction makeStill({\n  Flags,\n  Options,\n  execute,\n  config,\n}: {\n  Flags: Commands['Flags'];\n  Options: Commands['Options'];\n  execute: Execute;\n  config: PiCameraConfig;\n}) {\n  try {\n    const cmdCommand = createTakePictureCommand({\n      baseType: 'libcamera-still',\n      Flags,\n      Options,\n      execute,\n      config,\n    });\n\n    if (process.env.NODE_ENV === 'test') {\n      console.log('cmdCommand = ', cmdCommand);\n      return cmdCommand;\n    }\n    return runCommand({ execute, cmdCommand });\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(`Things exploded (${err.message})`);\n    } else {\n      throw new Error('Unknown error');\n    }\n  }\n}\n\nfunction makeVid({\n  Flags,\n  Options,\n  execute,\n  config,\n}: {\n  Flags: Commands['Flags'];\n  Options: Commands['Options'];\n  execute: Execute;\n  config: PiCameraConfig;\n}) {\n  try {\n    const cmdCommand = createTakePictureCommand({\n      baseType: 'libcamera-vid',\n      Flags,\n      Options,\n      execute,\n      config,\n    });\n\n    if (process.env.NODE_ENV === 'test') {\n      console.log('cmdCommand = ', cmdCommand);\n      return cmdCommand;\n    }\n    return runCommand({ execute, cmdCommand });\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(`Things exploded (${err.message})`);\n    } else {\n      throw new Error('Unknown error in tale Picture');\n    }\n  }\n}\n\nfunction makeRaw({\n  Flags,\n  Options,\n  execute,\n  config,\n}: {\n  Flags: Commands['Flags'];\n  Options: Commands['Options'];\n  execute: Execute;\n  config: PiCameraConfig;\n}) {\n  try {\n    const cmdCommand = createTakePictureCommand({\n      baseType: 'libcamera-raw',\n      Flags,\n      Options,\n      execute,\n      config,\n    });\n\n    if (process.env.NODE_ENV === 'test') {\n      console.log('cmdCommand = ', cmdCommand);\n      return cmdCommand;\n    }\n    return runCommand({ execute, cmdCommand });\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(`Things exploded (${err.message})`);\n    } else {\n      throw new Error('Unknown error in tale Picture');\n    }\n  }\n}\n\nfunction createTakePictureCommand({\n  baseType,\n  Flags,\n  Options,\n  execute,\n  config,\n}: {\n  baseType:\n    | 'libcamera-jpeg'\n    | 'libcamera-still'\n    | 'libcamera-vid'\n    | 'libcamera-raw';\n  Flags: Commands['Flags'];\n  Options: Commands['Options'];\n  execute: Execute;\n  config: PiCameraConfig;\n}) {\n  const cmdCommand = execute.cmdCommand({\n    base: baseType,\n    params: prepareConfigOptsAndFlags(config, { Flags, Options }),\n  });\n\n  return cmdCommand;\n}\n\nfunction configShouldBeAnObject({ config }: { config: any }) {\n  if (config) {\n    return config;\n  } else {\n    return {};\n  }\n}\n\nfunction prepareConfigOptsAndFlags(\n  config: any,\n  { Flags, Options }: { Flags: Commands['Flags']; Options: Commands['Options'] }\n): Array<string> {\n  const configArray: any = [];\n  Object.keys(config).forEach(key => {\n    // Only include flags if they're set to true\n    if (Flags.includes(key) && config[key]) {\n      configArray.push(`--${key}`);\n    } else if (Options.includes(key)) {\n      configArray.push(`--${key}`, config[key]);\n    }\n  });\n\n  return configArray;\n}\n","import {\n  jpegCommands,\n  stillCommands,\n  vidCommands,\n  rawCommands,\n} from './libCamera.config';\nimport { execute } from './utils';\n\nimport buildMakeLibCamera from './libCamera';\nconst makeLibCamera = buildMakeLibCamera({\n  execute,\n  jpegCommands,\n  stillCommands,\n  vidCommands,\n  rawCommands,\n});\n\nexport const libcamera = makeLibCamera();\nexport default libcamera;\n","import { exec } from 'child_process';\nimport makeExecute from './execute';\n\nconst execute = makeExecute({ exec });\n\nexport { execute };\n"],"names":["commonCommands","jpegCommands","Flags","Options","stillCommands","vidCommands","rawCommands","makeExecute","exec","Object","freeze","runCommand","cmdCommand","options","Promise","resolve","reject","error","stdout","stderr","trim","err","console","log","Error","base","params","Array","isArray","join","buildMakeLibCamera","execute","jpeg","config","configShouldBeAnObject","createTakePictureCommand","baseType","makeJpeg","still","message","makeStill","vid","makeVid","raw","makeRaw","configArray","keys","forEach","key","includes","push","libcamera","makeLibCamera"],"mappings":"mGAEaA,EACJ,CACL,OACA,UACA,eACA,aACA,aACA,YACA,UACA,QACA,QACA,SAXSA,EAaF,CACP,gBACA,SACA,SACA,UACA,UACA,YACA,QACA,SACA,mBACA,oBACA,OACA,kBACA,cACA,eACA,WACA,MACA,YACA,WACA,aACA,aACA,KACA,UACA,OACA,aACA,WACA,WACA,MACA,WACA,UACA,cACA,SACA,QAISC,EAAyB,CACpCC,gBAAWF,GACXG,kBAAaH,IAGFI,EAA0B,CACrCF,gBACKF,GACH,WACA,YACA,WACA,SACA,QAEFG,kBACKH,GACH,UACA,OACA,YACA,aACA,UACA,QACA,WACA,YAISK,EAAwB,CACnCH,gBACKF,GACH,WACA,SACA,QACA,SACA,WAEFG,kBACKH,GACH,UACA,UACA,QACA,UACA,QACA,QACA,UACA,UACA,WACA,YAISM,EAAwB,CACnCJ,gBAAWF,GACXG,kBACKH,GACH,sBCnGoBO,SAAcC,IAAAA,YAC7BC,OAAOC,OAAO,CACnBC,2BAKAC,IAAAA,WACAC,IAAAA,mBAMS,IAAIC,SAAQ,SAACC,EAASC,GAC3BR,EACEI,EACAC,GACA,SAACI,EAA6BC,EAAgBC,GACxCF,IACEE,GACFH,EAAOG,EAAOC,QAEhBJ,EAAOC,IAELC,GACFH,EAAQG,EAAOE,QAEbD,GACFJ,EAAQI,EAAOC,cAKvB,MAAOC,SACPC,QAAQC,IAAI,uBAAwBF,GAC9B,IAAIG,MAAM,kCAjClBZ,2BAsCAa,IAAAA,KACAC,IAAAA,WAKKA,GAAUD,SACNA,MAGJE,MAAMC,QAAQF,SACX,IAAIF,MAAM,kCAGXC,EAAO,IAAMC,EAAOG,KAAK,iBC3DZC,SACtBC,IAAAA,QACA9B,IAAAA,aACAG,IAAAA,cACAC,IAAAA,YACAC,IAAAA,mBAQO,kBACEG,OAAOC,OAAO,CACnBsB,KAAM,gBAAGC,IAAAA,cACPA,EAASC,EAAuB,CAAED,OAAAA,IAiE1C,gBAGEF,IAAAA,eAoBOpB,EAAW,CAAEoB,QAAAA,EAASnB,WAZVuB,EAAyB,CAC1CC,SAAU,iBACVlC,QAZFA,MAaEC,UAZFA,QAaE4B,QAAAA,EACAE,SAZFA,WApEaI,CAAS,CACdnC,MAAOD,EAAaC,MACpBC,QAASF,EAAaE,QACtB4B,QAAAA,EACAE,OAAAA,KAGJK,MAAO,gBAAGL,IAAAA,cACRA,EAASC,EAAuB,CAAED,OAAAA,IAkF1C,gBACE/B,IAAAA,MACAC,IAAAA,QACA4B,IAAAA,QACAE,IAAAA,kBAoBStB,EAAW,CAAEoB,QAAAA,EAASnB,WAZVuB,EAAyB,CAC1CC,SAAU,kBACVlC,MAAAA,EACAC,QAAAA,EACA4B,QAAAA,EACAE,OAAAA,MAQF,MAAOZ,SACHA,aAAeG,MACX,IAAIA,0BAA0BH,EAAIkB,aAElC,IAAIf,MAAM,kBA9GPgB,CAAU,CACftC,MAAOE,EAAcF,MACrBC,QAASC,EAAcD,QACvB4B,QAAAA,EACAE,OAAAA,KAGJQ,IAAK,gBAAGR,IAAAA,cACNA,EAASC,EAAuB,CAAED,OAAAA,IA2G1C,gBACE/B,IAAAA,MACAC,IAAAA,QACA4B,IAAAA,QACAE,IAAAA,kBAoBStB,EAAW,CAAEoB,QAAAA,EAASnB,WAZVuB,EAAyB,CAC1CC,SAAU,gBACVlC,MAAAA,EACAC,QAAAA,EACA4B,QAAAA,EACAE,OAAAA,MAQF,MAAOZ,SACHA,aAAeG,MACX,IAAIA,0BAA0BH,EAAIkB,aAElC,IAAIf,MAAM,kCAvIPkB,CAAQ,CACbxC,MAAOG,EAAYH,MACnBC,QAASE,EAAYF,QACrB4B,QAAAA,EACAE,OAAAA,KAGJU,IAAK,gBAAGV,IAAAA,cACNA,EAASC,EAAuB,CAAED,OAAAA,IAoI1C,gBACE/B,IAAAA,MACAC,IAAAA,QACA4B,IAAAA,QACAE,IAAAA,kBAoBStB,EAAW,CAAEoB,QAAAA,EAASnB,WAZVuB,EAAyB,CAC1CC,SAAU,gBACVlC,MAAAA,EACAC,QAAAA,EACA4B,QAAAA,EACAE,OAAAA,MAQF,MAAOZ,SACHA,aAAeG,MACX,IAAIA,0BAA0BH,EAAIkB,aAElC,IAAIf,MAAM,kCAhKPoB,CAAQ,CACb1C,MAAOI,EAAYJ,MACnBC,QAASG,EAAYH,QACrB4B,QAAAA,EACAE,OAAAA,QAOV,SAAStB,SACPoB,IAAAA,QACAnB,IAAAA,sBAMSmB,EAAQpB,WAAW,CAAEC,WAAAA,WAAoB,SAACS,SAC3CA,aAAeG,MACX,IAAIA,0BAA0BH,EAAIkB,aAChB,iBAARlB,EACV,IAAIG,MAAMH,GAEV,IAAIG,MAAM,mCAGpB,MAAOH,SACHA,aAAeG,MACX,IAAIA,0BAA0BH,EAAIkB,aAElC,IAAIf,MAAM,kBAqItB,SAASW,cAIPJ,QAa2BnB,WAAW,CACpCa,OAjBFW,SAkBEV,QAeFO,IA7BAA,SAc4C,CAAE/B,QAjB9CA,MAiBqDC,UAhBrDA,SAgCED,IAAAA,MAAOC,IAAAA,QAEH0C,EAAmB,GACzBpC,OAAOqC,KAAKb,GAAQc,SAAQ,SAAAC,GAEtB9C,EAAM+C,SAASD,IAAQf,EAAOe,GAChCH,EAAYK,UAAUF,GACb7C,EAAQ8C,SAASD,IAC1BH,EAAYK,UAAUF,EAAOf,EAAOe,OAIjCH,KAdT,IACEZ,IACE/B,EAAOC,EAEH0C,EAZR,SAASX,cAAyBD,QAIvB,GCxOX,IAQakB,EARSrB,EAAmB,CACvCC,QCPcxB,EAAY,CAAEC,KAAAA,SDQ5BP,aAAAA,EACAG,cAAAA,EACAC,YAAAA,EACAC,YAAAA,GAGuB8C"}