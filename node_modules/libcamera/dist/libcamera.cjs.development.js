'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var child_process = require('child_process');

var commonCommands = {
  Flags: ['help', 'version', 'list-cameras', 'fullscreen', 'qt-preview', 'nopreview', 'rawfull', 'hflip', 'vflip', 'flush'],
  Options: ['lens-position', 'camera', 'config', 'timeout', 'preview', 'info-text', 'width', 'height', 'viewfinder-width', 'viewfinder-height', 'mode', 'viewfinder-mode', 'lores-width', 'lores-height', 'rotation', 'roi', 'sharpness', 'contrast', 'brightness', 'saturation', 'ev', 'shutter', 'gain', 'analoggain', 'metering', 'exposure', 'awb', 'awbgains', 'denoise', 'tuning-file', 'output', 'wrap']
};
var jpegCommands = {
  Flags: /*#__PURE__*/[].concat(commonCommands.Flags),
  Options: /*#__PURE__*/[].concat(commonCommands.Options)
};
var stillCommands = {
  Flags: /*#__PURE__*/[].concat(commonCommands.Flags, ['datetime', 'timestamp', 'keypress', 'signal', 'raw']),
  Options: /*#__PURE__*/[].concat(commonCommands.Options, ['quality', 'exif', 'timelapse', 'framestart', 'restart', 'thumb', 'encoding', 'latest'])
};
var vidCommands = {
  Flags: /*#__PURE__*/[].concat(commonCommands.Flags, ['keypress', 'signal', 'split', 'inline', 'listen']),
  Options: /*#__PURE__*/[].concat(commonCommands.Options, ['quality', 'bitrate', 'intra', 'profile', 'level', 'codec', 'initial', 'segment', 'circular', 'frames'])
};
var rawCommands = {
  Flags: /*#__PURE__*/[].concat(commonCommands.Flags),
  Options: /*#__PURE__*/[].concat(commonCommands.Options, ['segment'])
};

function makeExecute(_ref) {
  var exec = _ref.exec;
  return Object.freeze({
    runCommand: runCommand,
    cmdCommand: cmdCommand
  });

  function runCommand(_ref2) {
    var cmdCommand = _ref2.cmdCommand,
        options = _ref2.options;

    try {
      return new Promise(function (resolve, reject) {
        exec(cmdCommand, options, function (error, stdout, stderr) {
          if (error) {
            if (stderr) {
              reject(stderr.trim());
            }

            reject(error);
          }

          if (stdout) {
            resolve(stdout.trim());
          }

          if (stderr) {
            resolve(stderr.trim());
          }
        });
      });
    } catch (err) {
      console.log('Run command error = ', err);
      throw new Error('Error in execute run command');
    }
  }

  function cmdCommand(_ref3) {
    var base = _ref3.base,
        params = _ref3.params;

    if (!params && base) {
      return base;
    }

    if (!Array.isArray(params)) {
      throw new Error('params must be an Array');
    }

    return base + ' ' + params.join(' ');
  }
}

var execute = /*#__PURE__*/makeExecute({
  exec: child_process.exec
});

function buildMakeLibCamera(_ref) {
  var execute = _ref.execute,
      jpegCommands = _ref.jpegCommands,
      stillCommands = _ref.stillCommands,
      vidCommands = _ref.vidCommands,
      rawCommands = _ref.rawCommands;
  return function makeLibCamera() {
    return Object.freeze({
      jpeg: function jpeg(_ref2) {
        var config = _ref2.config;
        config = configShouldBeAnObject({
          config: config
        });
        return makeJpeg({
          Flags: jpegCommands.Flags,
          Options: jpegCommands.Options,
          execute: execute,
          config: config
        });
      },
      still: function still(_ref3) {
        var config = _ref3.config;
        config = configShouldBeAnObject({
          config: config
        });
        return makeStill({
          Flags: stillCommands.Flags,
          Options: stillCommands.Options,
          execute: execute,
          config: config
        });
      },
      vid: function vid(_ref4) {
        var config = _ref4.config;
        config = configShouldBeAnObject({
          config: config
        });
        return makeVid({
          Flags: vidCommands.Flags,
          Options: vidCommands.Options,
          execute: execute,
          config: config
        });
      },
      raw: function raw(_ref5) {
        var config = _ref5.config;
        config = configShouldBeAnObject({
          config: config
        });
        return makeRaw({
          Flags: rawCommands.Flags,
          Options: rawCommands.Options,
          execute: execute,
          config: config
        });
      }
    });
  };
}

function runCommand(_ref6) {
  var execute = _ref6.execute,
      cmdCommand = _ref6.cmdCommand;

  try {
    return execute.runCommand({
      cmdCommand: cmdCommand
    })["catch"](function (err) {
      if (err instanceof Error) {
        throw new Error("Things exploded (" + err.message + ")");
      } else if (typeof err === 'string') {
        throw new Error(err);
      } else {
        throw new Error('Unknown error in run command');
      }
    });
  } catch (err) {
    if (err instanceof Error) {
      throw new Error("Things exploded (" + err.message + ")");
    } else {
      throw new Error('Unknown error');
    }
  }
}

function makeJpeg(_ref7) {
  var Flags = _ref7.Flags,
      Options = _ref7.Options,
      execute = _ref7.execute,
      config = _ref7.config;
  var cmdCommand = createTakePictureCommand({
    baseType: 'libcamera-jpeg',
    Flags: Flags,
    Options: Options,
    execute: execute,
    config: config
  });

  return runCommand({
    execute: execute,
    cmdCommand: cmdCommand
  });
}

function makeStill(_ref8) {
  var Flags = _ref8.Flags,
      Options = _ref8.Options,
      execute = _ref8.execute,
      config = _ref8.config;

  try {
    var cmdCommand = createTakePictureCommand({
      baseType: 'libcamera-still',
      Flags: Flags,
      Options: Options,
      execute: execute,
      config: config
    });

    if ("development" === 'test') {
      console.log('cmdCommand = ', cmdCommand);
      return cmdCommand;
    }

    return runCommand({
      execute: execute,
      cmdCommand: cmdCommand
    });
  } catch (err) {
    if (err instanceof Error) {
      throw new Error("Things exploded (" + err.message + ")");
    } else {
      throw new Error('Unknown error');
    }
  }
}

function makeVid(_ref9) {
  var Flags = _ref9.Flags,
      Options = _ref9.Options,
      execute = _ref9.execute,
      config = _ref9.config;

  try {
    var cmdCommand = createTakePictureCommand({
      baseType: 'libcamera-vid',
      Flags: Flags,
      Options: Options,
      execute: execute,
      config: config
    });

    if ("development" === 'test') {
      console.log('cmdCommand = ', cmdCommand);
      return cmdCommand;
    }

    return runCommand({
      execute: execute,
      cmdCommand: cmdCommand
    });
  } catch (err) {
    if (err instanceof Error) {
      throw new Error("Things exploded (" + err.message + ")");
    } else {
      throw new Error('Unknown error in tale Picture');
    }
  }
}

function makeRaw(_ref10) {
  var Flags = _ref10.Flags,
      Options = _ref10.Options,
      execute = _ref10.execute,
      config = _ref10.config;

  try {
    var cmdCommand = createTakePictureCommand({
      baseType: 'libcamera-raw',
      Flags: Flags,
      Options: Options,
      execute: execute,
      config: config
    });

    if ("development" === 'test') {
      console.log('cmdCommand = ', cmdCommand);
      return cmdCommand;
    }

    return runCommand({
      execute: execute,
      cmdCommand: cmdCommand
    });
  } catch (err) {
    if (err instanceof Error) {
      throw new Error("Things exploded (" + err.message + ")");
    } else {
      throw new Error('Unknown error in tale Picture');
    }
  }
}

function createTakePictureCommand(_ref11) {
  var baseType = _ref11.baseType,
      Flags = _ref11.Flags,
      Options = _ref11.Options,
      execute = _ref11.execute,
      config = _ref11.config;
  var cmdCommand = execute.cmdCommand({
    base: baseType,
    params: prepareConfigOptsAndFlags(config, {
      Flags: Flags,
      Options: Options
    })
  });
  return cmdCommand;
}

function configShouldBeAnObject(_ref12) {
  var config = _ref12.config;

  if (config) {
    return config;
  } else {
    return {};
  }
}

function prepareConfigOptsAndFlags(config, _ref13) {
  var Flags = _ref13.Flags,
      Options = _ref13.Options;
  var configArray = [];
  Object.keys(config).forEach(function (key) {
    // Only include flags if they're set to true
    if (Flags.includes(key) && config[key]) {
      configArray.push("--" + key);
    } else if (Options.includes(key)) {
      configArray.push("--" + key, config[key]);
    }
  });
  return configArray;
}

var makeLibCamera = /*#__PURE__*/buildMakeLibCamera({
  execute: execute,
  jpegCommands: jpegCommands,
  stillCommands: stillCommands,
  vidCommands: vidCommands,
  rawCommands: rawCommands
});
var libcamera = /*#__PURE__*/makeLibCamera();

exports.default = libcamera;
exports.libcamera = libcamera;
//# sourceMappingURL=libcamera.cjs.development.js.map
